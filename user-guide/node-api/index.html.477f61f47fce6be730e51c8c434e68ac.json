{"head":{"description":"stylelint Node.js 应用程序接口 stylelint 模块包含一个提供 Node 应用程序接口的 lint() 函数。 安装 stylelint 是一个 npm 包。它使用命令安装： 选项 选项是具有以下属性的对象。 虽然 files 和 code…","title":"stylelint Node.js 应用程序接口"},"body":"<h1 id=\"stylelint-nodejs-应用程序接口\"><a href=\"#stylelint-nodejs-%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%8F%A3\" class=\"phenomic-HeadingAnchor\">#</a>stylelint Node.js 应用程序接口</h1>\n<p>stylelint 模块包含一个提供 Node 应用程序接口的 <code>lint()</code> 函数。</p>\n<pre><code class=\"hljs language-js\">stylelint.lint(options)\n  .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resultObject</span>) </span>{ .. });</code></pre>\n<ul>\n<li><a href=\"#%E5%AE%89%E8%A3%85\">安装</a></li>\n<li>\n<p><a href=\"#%E9%80%89%E9%A1%B9\">选项</a></p>\n<ul>\n<li><a href=\"#code\">code</a></li>\n<li><a href=\"#codefilename\">codeFilename</a></li>\n<li><a href=\"#config\">config</a></li>\n<li><a href=\"#configfile\">configFile</a></li>\n<li><a href=\"#configbasedir\">configBasedir</a></li>\n<li><a href=\"#configoverrides\">configOverrides</a></li>\n<li><a href=\"#files\">files</a></li>\n<li><a href=\"#globbyoptions\">globbyOptions</a></li>\n<li><a href=\"#formatter\">formatter</a></li>\n<li><a href=\"#ignoredisables\">ignoreDisables</a></li>\n<li><a href=\"#disabledefaultignores\">disableDefaultIgnores</a></li>\n<li><a href=\"#cache\">cache</a></li>\n<li><a href=\"#cachelocation\">cacheLocation</a></li>\n<li><a href=\"#reportneedlessdisables\">reportNeedlessDisables</a></li>\n<li><a href=\"#maxwarnings\">maxWarnings</a></li>\n<li><a href=\"#ignorepath\">ignorePath</a></li>\n<li><a href=\"#syntax\">syntax</a></li>\n<li><a href=\"#customsyntax\">customSyntax</a></li>\n<li><a href=\"#fix\">fix</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E8%BF%94%E5%9B%9E%E7%9A%84-promise\">返回的 Promise</a></p>\n<ul>\n<li><a href=\"#errored\">errored</a></li>\n<li><a href=\"#output\">output</a></li>\n<li><a href=\"#postcssresults\">postcssResults</a></li>\n<li><a href=\"#results\">results</a></li>\n</ul>\n</li>\n<li><a href=\"#%E8%AF%AD%E6%B3%95%E9%94%99%E8%AF%AF\">语法错误</a></li>\n<li><a href=\"#%E7%94%A8%E6%B3%95%E7%A4%BA%E4%BE%8B\">用法示例</a></li>\n</ul>\n<h2 id=\"安装\"><a href=\"#%E5%AE%89%E8%A3%85\" class=\"phenomic-HeadingAnchor\">#</a>安装</h2>\n<p>stylelint 是一个 <a href=\"https://www.npmjs.com/package/stylelint\">npm 包</a>。它使用命令安装：</p>\n<pre><code class=\"hljs language-console\">npm install stylelint</code></pre>\n<h2 id=\"选项\"><a href=\"#%E9%80%89%E9%A1%B9\" class=\"phenomic-HeadingAnchor\">#</a>选项</h2>\n<p>选项是具有以下属性的对象。</p>\n<p>虽然 <code>files</code> 和 <code>code</code> 都是“可选的”，但您 <em>必须</em> 选择其中之一。其他所有选项都是可选的。</p>\n<h3 id=\"code\"><a href=\"#code\" class=\"phenomic-HeadingAnchor\">#</a><code>code</code></h3>\n<p>要检查的 CSS 字符串。</p>\n<h3 id=\"codefilename\"><a href=\"#codefilename\" class=\"phenomic-HeadingAnchor\">#</a><code>codeFilename</code></h3>\n<p>如果使用 <code>code</code> 直接传递源字符串，可以使用 <code>codeFilename</code> 将该代码与特定文件名相关联。</p>\n<p>这可能很有用，比如在制作直接传递代码但仍需要使用配置的 <code>ignoreFiles</code> 功能的文本编辑器插件时，可能会忽略该代码。</p>\n<h3 id=\"config\"><a href=\"#config\" class=\"phenomic-HeadingAnchor\">#</a><code>config</code></h3>\n<p><a href=\"../configuration/\">stylelint 配置对象</a>。</p>\n<p>如果没有传递 <code>config</code> 或 <code>configFile</code>，stylelint 将使用<a href=\".././configuration/#%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE%E5%AF%B9%E8%B1%A1\">配置查找算法</a>来查找正确的配置。</p>\n<h3 id=\"configfile\"><a href=\"#configfile\" class=\"phenomic-HeadingAnchor\">#</a><code>configFile</code></h3>\n<p>包含 <a href=\"../configuration/\">stylelint 配置对象</a>的 JSON、YAML 或 JS 文件的路径。</p>\n<p>它应该是绝对路径或您的进程运行目录（<code>process.cwd()</code>）的相对路径。我们建议使用绝对路径。</p>\n<h3 id=\"configbasedir\"><a href=\"#configbasedir\" class=\"phenomic-HeadingAnchor\">#</a><code>configBasedir</code></h3>\n<p>绝对路径，定义 <code>extends</code> 和 <code>plugins</code> 的相对路径 <em>相对于</em> 的目录。</p>\n<p>只有在直接通过 <code>config</code> 属性传递对象时才需要这样做。如果您用了 <code>configFile</code>，则这个选项不是必需的。</p>\n<p>如果传递的 <code>config</code> 对象使用相对路径，例如用于 <code>extends</code> 或 <code>plugins</code>，您必须传递 <code>configBasedir</code>。如果没有使用相对路径，则无需这个属性。</p>\n<h3 id=\"configoverrides\"><a href=\"#configoverrides\" class=\"phenomic-HeadingAnchor\">#</a><code>configOverrides</code></h3>\n<p>部分 stylelint 配置对象，其属性将覆盖现有的配置对象，无论该配置是通过 <code>config</code> 选项还是 <code>.stylelintrc</code> 文件加载的。</p>\n<p><code>configOverrides</code> 和 <code>config</code> 选项之间的区别在于：如果传递了任何 <code>config</code> 对象，则 stylelint 不会去寻找 <code>.stylelintrc</code> 文件而只是使用您传递的 <code>config</code> 对象；但如果您想加载 <code>.stylelintrc</code> 文件 <em>并且</em> 覆盖它的特定部分，<code>configOverrides</code> 就是做这个的。</p>\n<h3 id=\"files\"><a href=\"#files\" class=\"phenomic-HeadingAnchor\">#</a><code>files</code></h3>\n<p>文件 glob 或文件 glob 数组。最终传递给 <a href=\"https://github.com/sindresorhus/globby\">globby</a> 来找出您想要检查的文件。</p>\n<p>相对 glob 将被认为是 <code>globbyOptions.cwd</code> 的相对路径。</p>\n<p>默认情况下，忽略所有 <code>node_modules</code> 和 <code>bower_components</code>。</p>\n<h3 id=\"globbyoptions\"><a href=\"#globbyoptions\" class=\"phenomic-HeadingAnchor\">#</a><code>globbyOptions</code></h3>\n<p>此选项将在使用 globby 时与 <code>files</code> 一起传递。</p>\n<p>例如，您可以手动设置特定的 <code>cwd</code>，这是 <code>files</code> glob 的当前工作目录的文件夹路径。<code>files</code> 中的相对 glob 将被认为是此路径的相对路径。默认情况下，<code>cwd</code> 将由 <code>process.cwd()</code> 设置。</p>\n<p>有关更多详细信息，请参阅 <a href=\"https://github.com/sindresorhus/globby#options\">Globby 指南</a>。</p>\n<h3 id=\"formatter\"><a href=\"#formatter\" class=\"phenomic-HeadingAnchor\">#</a><code>formatter</code></h3>\n<p>选项：<code>\"compact\"|\"json\"|\"string\"|\"unix\"|\"verbose\"</code> 或函数。默认为 <code>\"json\"</code>。</p>\n<p>指定要用于结果的格式化程序。</p>\n<p>如果传递函数，它必须符合<a href=\"../../developer-guide/formatters/\">开发者指南</a>中描述的条款。</p>\n<h3 id=\"ignoredisables\"><a href=\"#ignoredisables\" class=\"phenomic-HeadingAnchor\">#</a><code>ignoreDisables</code></h3>\n<p>如果为 <code>true</code>，则将忽略所有禁用注释（例如 <code>/* stylelint-disable block-no-empty */</code>）。</p>\n<p>您可以使用此选项查看没有这些例外情况时您的检查结果会是什么样的。</p>\n<h3 id=\"disabledefaultignores\"><a href=\"#disabledefaultignores\" class=\"phenomic-HeadingAnchor\">#</a><code>disableDefaultIgnores</code></h3>\n<p>如果为 <code>true</code>，则 stylelint 不会自动忽略 <code>node_modules</code> 和 <code>bower_components</code> 的内容。（默认情况下，这些目录会自动被忽略。）</p>\n<h3 id=\"cache\"><a href=\"#cache\" class=\"phenomic-HeadingAnchor\">#</a><code>cache</code></h3>\n<p>存储有关已处理文件的信息，以便下次运行 stylelint 时仅对已更改的文件进行操作。启用此选项可以显著提高 stylelint 的速度，因为只会检查已更改的文件。</p>\n<p>默认情况下，缓存存储在 <code>process.cwd()</code> 下的 <code>.stylelintcache</code> 中。要更改它，请使用 <code>cacheLocation</code> 选项。</p>\n<p><strong>注意：</strong> 如果使用 <code>cache</code> 运行 stylelint 然后运行没有 <code>cache</code> 的 stylelint，则会删除 <code>.stylelintcache</code> 文件。这是必要的，因为我们必须假设 <code>.stylelintcache</code> 被第二个命令废止。</p>\n<h3 id=\"cachelocation\"><a href=\"#cachelocation\" class=\"phenomic-HeadingAnchor\">#</a><code>cacheLocation</code></h3>\n<p>用于 <code>cache</code> 的文件或目录的路径。只有与 <code>cache</code> 共同使用才有意义。如果没有指定位置，将在 <code>process.cwd()</code> 中创建 <code>.stylelintcache</code>。</p>\n<p>如果指定了目录，则将在指定的文件夹中创建缓存文件。该文件的名称将基于 <code>process.cwd()</code> 的哈希（例如 <code>.cache_hashOfCWD</code>）。这允许 stylelint 为来自不同项目的各种缓存复用单个位置。</p>\n<p><strong>注意：</strong> 如果 <code>cacheLocation</code> 的目录不存在，请确保在 Windows 上添加一个尾随的<code>/</code>（在 *nix 系统）或 <code>\\</code>（在 Windows）。否则，路径将被假定为文件。</p>\n<h3 id=\"reportneedlessdisables\"><a href=\"#reportneedlessdisables\" class=\"phenomic-HeadingAnchor\">#</a><code>reportNeedlessDisables</code></h3>\n<p>如果为 <code>true</code>，<code>ignoreDisables</code> 也将被设置为 <code>true</code>，返回的数据将包含 <code>needlessDisables</code> 属性，其值是一个对象数组，每个成员对应一个源码，告诉您哪个 stylelint 禁用注释是没有阻止违规检查的。</p>\n<p>使用此报告来清理代码库，仅保留有其服务目的的 stylelint 禁用注释。</p>\n<p><em>建议使用此选项的方法是通过命令行界面。</em> 它将向控制台输出一个干净的报告。</p>\n<h3 id=\"maxwarnings\"><a href=\"#maxwarnings\" class=\"phenomic-HeadingAnchor\">#</a><code>maxWarnings</code></h3>\n<p>设置接受警告数量的限制。如果找到的警告数超过给定限制，将向返回的数据添加 <code>maxWarningsExceeded</code> 属性。\n该值是一个对象（例如 <code>{ maxWarnings: 0, foundWarnings: 12 }</code> ）。</p>\n<p><em>建议使用此选项的方法是通过命令行界面。</em> 当超过 <code>maxWarnings</code> 时，它将以退出码 2 退出。</p>\n<h3 id=\"ignorepath\"><a href=\"#ignorepath\" class=\"phenomic-HeadingAnchor\">#</a><code>ignorePath</code></h3>\n<p>包含描述要忽略的文件的模式的文件的路径。路径可以是绝对路径或 <code>process.cwd()</code> 的相对路径。默认情况下，stylelint 在 <code>process.cwd()</code> 中查找 <code>.stylelintignore</code>。请参阅<a href=\"../configuration/#stylelintignore\">配置</a>。</p>\n<h3 id=\"syntax\"><a href=\"#syntax\" class=\"phenomic-HeadingAnchor\">#</a><code>syntax</code></h3>\n<p>选项：<code>\"css-in-js\"|\"html\"|\"less\"|\"markdown\"|\"sass\"|\"scss\"|\"sugarss\"</code></p>\n<p>强制使用特定的非标准语法来解析源样式表。</p>\n<p>如果您希望通过自定义语法来使用 stylelint，请参阅下面的<a href=\"#customsyntax\"><code>customSyntax</code></a>选项。</p>\n<h3 id=\"customsyntax\"><a href=\"#customsyntax\" class=\"phenomic-HeadingAnchor\">#</a><code>customSyntax</code></h3>\n<p>自定义 <a href=\"https://github.com/postcss/postcss#syntaxes\">PostCSS 兼容语法</a>模块的绝对路径。</p>\n<p>但请注意，stylelint 无法保证核心规则可以使用除上面 <code>syntax</code> 选项列出的默认值之外的语法。</p>\n<h3 id=\"fix\"><a href=\"#fix\" class=\"phenomic-HeadingAnchor\">#</a><code>fix</code></h3>\n<p>如果为 <code>true</code>，则 stylelint 将尽可能多的修复错误，修复实际的源文件，报告未修复的错误。请参阅<a href=\"../cli/#%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E9%94%99%E8%AF%AF\">自动修复错误</a>文档。</p>\n<h2 id=\"返回的-promise\"><a href=\"#%E8%BF%94%E5%9B%9E%E7%9A%84-promise\" class=\"phenomic-HeadingAnchor\">#</a>返回的 Promise</h2>\n<p><code>stylelint.lint()</code> 返回一个 Promise 对象，它将释为包含以下属性的对象：</p>\n<h3 id=\"errored\"><a href=\"#errored\" class=\"phenomic-HeadingAnchor\">#</a><code>errored</code></h3>\n<p>布尔。如果为“true”，则至少有一个具有“错误”级别严重性的规则注册了违规。</p>\n<h3 id=\"output\"><a href=\"#output\" class=\"phenomic-HeadingAnchor\">#</a><code>output</code></h3>\n<p>展示格式化违规的字符串（使用默认格式化程序或您传递的任何一个）。</p>\n<h3 id=\"postcssresults\"><a href=\"#postcssresults\" class=\"phenomic-HeadingAnchor\">#</a><code>postcssResults</code></h3>\n<p>包含处理期间累积的所有 <a href=\"https://api.postcss.org/LazyResult.html\">PostCSS LazyResult</a> 的数组。</p>\n<h3 id=\"results\"><a href=\"#results\" class=\"phenomic-HeadingAnchor\">#</a><code>results</code></h3>\n<p>包含所有 stylelint 结果对象（格式化程序使用的对象）的数组。</p>\n<h2 id=\"语法错误\"><a href=\"#%E8%AF%AD%E6%B3%95%E9%94%99%E8%AF%AF\" class=\"phenomic-HeadingAnchor\">#</a>语法错误</h2>\n<p>当您的 CSS 包含语法错误时，<code>stylelint.lint()</code> 并不会拒绝 Promise。\n它释为一个对象（请参阅<a href=\"#%E8%BF%94%E5%9B%9E%E7%9A%84-promise\">返回的 Promise</a>），其中包含有关语法错误的信息。</p>\n<h2 id=\"用法示例\"><a href=\"#%E7%94%A8%E6%B3%95%E7%A4%BA%E4%BE%8B\" class=\"phenomic-HeadingAnchor\">#</a>用法示例</h2>\n<p>如果 <code>myConfig</code> 不包含 <code>extends</code> 或 <code>plugins</code> 的相对路径，则不必使用 <code>configBasedir</code>：</p>\n<pre><code class=\"hljs language-js\">stylelint.lint({\n  <span class=\"hljs-attr\">config</span>: myConfig,\n  <span class=\"hljs-attr\">files</span>: <span class=\"hljs-string\">\"all/my/stylesheets/*.css\"</span>\n})\n  .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{\n    <span class=\"hljs-comment\">// 利用 data.output、data.errored、</span>\n    <span class=\"hljs-comment\">// 还有 data.results 做些什么</span>\n  })\n  .catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{\n    <span class=\"hljs-comment\">// 利用 err 做些什么，例如</span>\n    <span class=\"hljs-built_in\">console</span>.error(err.stack);\n  });</code></pre>\n<p>如果 <code>myConfig</code> <em>包含</em> <code>extends</code> 或 <code>plugins</code> 的相对路径，您 <em>必须</em> 使用 <code>configBasedir</code>：</p>\n<pre><code class=\"hljs language-js\">stylelint.lint({\n  <span class=\"hljs-attr\">config</span>: myConfig,\n  <span class=\"hljs-attr\">configBasedir</span>: path.join(__dirname, <span class=\"hljs-string\">\"configs\"</span>),\n  <span class=\"hljs-attr\">files</span>: <span class=\"hljs-string\">\"all/my/stylesheets/*.css\"</span>\n}).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{ .. });</code></pre>\n<p>也许您想使用 CSS 字符串而不是文件 glob，并且您想使用字符串格式化程序而不是默认的 JSON：</p>\n<pre><code class=\"hljs language-js\">stylelint.lint({\n  <span class=\"hljs-attr\">code</span>: <span class=\"hljs-string\">\"a { color: pink; }\"</span>,\n  <span class=\"hljs-attr\">config</span>: myConfig,\n  <span class=\"hljs-attr\">formatter</span>: <span class=\"hljs-string\">\"string\"</span>\n}).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{ .. });</code></pre>\n<p>也许您想使用我自己的自定义格式化程序函数并解析 <code>.scss</code> 源文件：</p>\n<pre><code class=\"hljs language-js\">stylelint.lint({\n  <span class=\"hljs-attr\">config</span>: myConfig,\n  <span class=\"hljs-attr\">files</span>: <span class=\"hljs-string\">\"all/my/stylesheets/*.scss\"</span>,\n  <span class=\"hljs-attr\">formatter</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">stylelintResults</span>) </span>{ .. },\n  <span class=\"hljs-attr\">syntax</span>: <span class=\"hljs-string\">\"scss\"</span>\n}).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{ .. });</code></pre>\n<p>相同的模式可用于检查 Less、SCSS 或 <a href=\"https://github.com/postcss/sugarss\">SugarSS</a> 语法。</p>\n","__filename":"user-guide/node-api.md","__url":"/user-guide/node-api/","__resourceUrl":"/user-guide/node-api/index.html","__dataUrl":"/user-guide/node-api/index.html.477f61f47fce6be730e51c8c434e68ac.json"}