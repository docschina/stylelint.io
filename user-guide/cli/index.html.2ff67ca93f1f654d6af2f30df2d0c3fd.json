{"head":{"description":"stylelint 命令行界面 安装 stylelint 是一个 npm 包。它使用命令安装： 用法 stylelint --help 打印命令行界面文档。 命令行界面将格式化结果输出到 process.stdout，您可以用人工或其他地方读取（例如将信息写入文件）。 例子…","title":"stylelint 命令行界面"},"body":"<h1 id=\"stylelint-命令行界面\"><a href=\"#stylelint-%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%95%8C%E9%9D%A2\" class=\"phenomic-HeadingAnchor\">#</a>stylelint 命令行界面</h1>\n<h2 id=\"安装\"><a href=\"#%E5%AE%89%E8%A3%85\" class=\"phenomic-HeadingAnchor\">#</a>安装</h2>\n<p>stylelint 是一个 <a href=\"https://www.npmjs.com/package/stylelint\">npm 包</a>。它使用命令安装：</p>\n<pre><code class=\"hljs language-shell\">npm install stylelint --save-dev</code></pre>\n<ul>\n<li>\n<p><a href=\"#%E7%94%A8%E6%B3%95\">用法</a></p>\n<ul>\n<li><a href=\"#%E4%BE%8B%E5%AD%90\">例子</a></li>\n<li><a href=\"#%E9%80%92%E5%BD%92%E6%A3%80%E6%9F%A5%E7%9B%AE%E5%BD%95\">递归检查目录</a></li>\n<li><a href=\"#%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E9%94%99%E8%AF%AF\">自动修复错误</a></li>\n<li><a href=\"#%E6%8E%92%E9%99%A4%E9%85%8D%E7%BD%AE%E6%95%85%E9%9A%9C\">排除配置故障</a></li>\n</ul>\n</li>\n<li><a href=\"#%E8%AF%AD%E6%B3%95%E9%94%99%E8%AF%AF\">语法错误</a></li>\n<li><a href=\"#%E9%80%80%E5%87%BA%E4%BB%A3%E7%A0%81\">退出代码</a></li>\n</ul>\n<h2 id=\"用法\"><a href=\"#%E7%94%A8%E6%B3%95\" class=\"phenomic-HeadingAnchor\">#</a>用法</h2>\n<p><code>stylelint --help</code> 打印命令行界面文档。</p>\n<p>命令行界面将格式化结果输出到 <code>process.stdout</code>，您可以用人工或其他地方读取（例如将信息写入文件）。</p>\n<h3 id=\"例子\"><a href=\"#%E4%BE%8B%E5%AD%90\" class=\"phenomic-HeadingAnchor\">#</a>例子</h3>\n<p>当您运行类似于以下示例的命令时，请确保在文件 glob 周围包含引号。这将确保无论您的 shell 如何，都可以使用 <a href=\"https://github.com/sindresorhus/globby\">globby</a> 的功能（如 <code>**</code> glob 星号）。</p>\n<p>寻找 <code>.stylelintrc</code> 并检查 <code>foo</code> 目录中的所有 <code>.css</code> 文件：</p>\n<pre><code class=\"hljs language-shell\">stylelint \"foo/*.css\"</code></pre>\n<p>寻找 <code>.stylelintrc</code> 并检查 <code>bar</code> 目录中的所有 <code>.html</code> 文件中的所有 <code>&#x3C;style></code> 块：</p>\n<pre><code class=\"hljs language-shell\">stylelint \"bar/*.html\"</code></pre>\n<p>寻找 <code>.stylelintrc</code> 和检查 <code>stdin</code>（标准输入）：</p>\n<pre><code class=\"hljs language-shell\">echo \"a { color: pink; }\" | stylelint</code></pre>\n<p>使用 <code>bar/mySpecialConfig.json</code> 作为配置来检查 <code>foo</code> 目录中的所有 <code>.css</code> 文件，然后将输出写入 <code>myTestReport.txt</code>：</p>\n<pre><code class=\"hljs language-shell\">stylelint \"foo/*.css\" --config bar/mySpecialConfig.json > myTestReport.txt</code></pre>\n<p>使用 <code>bar/mySpecialConfig.json</code> 作为配置，打开静默模式，检查 <code>foo</code> 及其任何子目录还有 <code>bar</code> 目录中的所有 <code>.css</code> 文件：</p>\n<pre><code class=\"hljs language-shell\">stylelint \"foo/**/*.css\" \"bar/*.css\" -q -f json --config bar/mySpecialConfig.json</code></pre>\n<p>检查所有 <code>.css</code> 文件, 使用 glob 中的否定排除 <code>docker</code> 子文件夹中的文件：</p>\n<pre><code class=\"hljs language-shell\">stylelint \"**/*.css, !**/docker/**\"</code></pre>\n<p>使用 <code>cache</code> 和 <code>cache-location</code> 选项缓存已处理的 <code>.scss</code> 文件，以便只对 <code>foo</code> 目录中已更改的文件进行操作：</p>\n<pre><code class=\"hljs language-shell\">stylelint \"foo/**/*.scss\" --cache --cache-location \"/Users/user/.stylelintcache/\"</code></pre>\n<p>stylelint 将<a href=\"../css-processors/#parsing-non-standard-syntax\">自动推断语法</a>。但您可以使用 <code>--syntax</code> 选项强制使用特定语法。例如，将 <code>foo</code> 目录中所有 <code>.css</code> 文件 <em>作为 Scss</em> 检查：</p>\n<pre><code class=\"hljs language-shell\">stylelint \"foo/**/*.css\" --syntax scss</code></pre>\n<p>stylelint还可以接受自定义 <a href=\"https://github.com/postcss/postcss#syntaxes\">PostCSS 兼容语法</a>。要使用自定义语法，请提供语法模块名称或语法文件的路径：<code>--custom-syntax custom-syntax</code> 或 <code>--custom-syntax ./path/to/custom-syntax</code>。</p>\n<h3 id=\"递归检查目录\"><a href=\"#%E9%80%92%E5%BD%92%E6%A3%80%E6%9F%A5%E7%9B%AE%E5%BD%95\" class=\"phenomic-HeadingAnchor\">#</a>递归检查目录</h3>\n<p>要递归检查目录，使用 <code>**</code> glob 星号：</p>\n<pre><code class=\"hljs language-shell\">stylelint \"foo/**/*.scss\"</code></pre>\n<p>glob 周围的引号很重要，因为它们允许 stylelint 使用 globby 而不是 shell 来解释 glob，这可能在功能上不完全相同。</p>\n<h3 id=\"自动修复错误\"><a href=\"#%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E9%94%99%E8%AF%AF\" class=\"phenomic-HeadingAnchor\">#</a>自动修复错误</h3>\n<p>使用 <code>--fix</code> 选项，stylelint 将尽可能多的修复错误，修复实际的源文件，报告未修复的错误。</p>\n<p>检查 <code>foo</code> 目录中所有的 <code>.css</code> 文件。如果违反支持自动修复的规则，则修复源文件：</p>\n<pre><code class=\"hljs language-shell\">stylelint \"foo/*.css\" --fix</code></pre>\n<p><strong>注意：</strong> 这是一个 <em>试验性</em> 功能。它目前不遵守在源码中禁用 stylelint 的特殊注释（例如 <code>/* stylelint-disable */</code>）。无论这些注释如何，都将应用自动修复。</p>\n<p>如果您同时使用这些特殊注释和自动修复，请运行 stylelint 两次作为临时解决方案。在第一次运行时，可能会错过某些违规，或者可能会错误地报告某些违规。</p>\n<p>对于具有标准语法的 CSS，stylelint 将使用 <a href=\"https://github.com/postcss/postcss-safe-parser\">postcss-safe-parser</a> 来修复语法错误。</p>\n<h3 id=\"排除配置故障\"><a href=\"#%E6%8E%92%E9%99%A4%E9%85%8D%E7%BD%AE%E6%95%85%E9%9A%9C\" class=\"phenomic-HeadingAnchor\">#</a>排除配置故障</h3>\n<p>使用 <code>--print-config</code> 选项，stylelint 会输出要用于文件的配置。如果存在该选项，则不执行检查，此时只有与配置相关的选项有效。</p>\n<h2 id=\"语法错误\"><a href=\"#%E8%AF%AD%E6%B3%95%E9%94%99%E8%AF%AF\" class=\"phenomic-HeadingAnchor\">#</a>语法错误</h2>\n<p>命令行界面会通知您 CSS 中的语法错误。\n它使用与违规检查相同的输出格式。\n错误名称是 <code>CssSyntaxError</code>。</p>\n<h2 id=\"退出代码\"><a href=\"#%E9%80%80%E5%87%BA%E4%BB%A3%E7%A0%81\" class=\"phenomic-HeadingAnchor\">#</a>退出代码</h2>\n<p>命令行界面会使用以下退出代码退出进程：</p>\n<ul>\n<li>1：未知错误。</li>\n<li>2：至少有一个具有\"error\"级别严重性的规则触发了至少一次违规。</li>\n<li>78：配置文件有问题。</li>\n<li>80：传递了文件glob，但没有找到文件。</li>\n</ul>\n","__filename":"user-guide/cli.md","__url":"/user-guide/cli/","__resourceUrl":"/user-guide/cli/index.html","__dataUrl":"/user-guide/cli/index.html.2ff67ca93f1f654d6af2f30df2d0c3fd.json"}