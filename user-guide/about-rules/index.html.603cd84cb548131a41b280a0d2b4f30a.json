{"head":{"description":"关于规则 我们一直非常谨慎地对待规则命名一致性。 这些规则旨在协同执行严格的约定。 关于规则名称 规则名称是： 由连字符分隔的小写单词组成 分为两部分 第一部分描述了规则适用的事物。第二部分描述了规则检查的内容。 例如： 当规则适用于整个样式表时，没有第一部分。 例如：…","title":"关于规则"},"body":"<h1 id=\"关于规则\"><a href=\"#%E5%85%B3%E4%BA%8E%E8%A7%84%E5%88%99\" class=\"phenomic-HeadingAnchor\">#</a>关于规则</h1>\n<p>我们一直非常谨慎地对待规则命名一致性。</p>\n<p>这些规则旨在协同执行严格的约定。</p>\n<ul>\n<li>\n<p><a href=\"#%E5%85%B3%E4%BA%8E%E8%A7%84%E5%88%99%E5%90%8D%E7%A7%B0\">关于规则名称</a></p>\n<ul>\n<li><a href=\"#%E5%90%A6%E5%AE%9A%E8%A7%84%E5%88%99\">否定规则</a></li>\n<li><a href=\"#%E6%9C%80%E5%A4%A7%E5%92%8C%E6%9C%80%E5%B0%8F%E8%A7%84%E5%88%99\">最大和最小规则</a></li>\n<li><a href=\"#%E7%A9%BA%E7%99%BD%E7%AC%A6%E8%A7%84%E5%88%99\">空白符规则</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E8%A7%84%E5%88%99%E5%8D%8F%E5%90%8C%E5%B7%A5%E4%BD%9C\">规则协同工作</a></p>\n<ul>\n<li>\n<p><a href=\"#-newlinespace-before-%E5%92%8C--newlinespace-after-%E8%A7%84%E5%88%99\">*-newline/space-before 和 *-newline/space-after 规则</a></p>\n<ul>\n<li><a href=\"#%E7%A4%BA%E4%BE%8B-a\">示例 A</a></li>\n<li><a href=\"#%E7%A4%BA%E4%BE%8B-b\">示例 B</a></li>\n<li><a href=\"#%E7%A4%BA%E4%BE%8B-c\">示例 C</a></li>\n<li><a href=\"#%E7%A4%BA%E4%BE%8B-d\">示例 D</a></li>\n</ul>\n</li>\n<li><a href=\"#-empty-line-before-%E5%92%8C--max-empty-lines-%E8%A7%84%E5%88%99\">*-empty-line-before 和 *-max-empty-lines 规则</a></li>\n<li>\n<p><a href=\"#-whitelist%E3%80%81-blacklist%E3%80%81color-named-%E5%92%8C%E5%8F%AF%E5%BA%94%E7%94%A8--no--%E8%A7%84%E5%88%99\">*-whitelist、*-blacklist、color-named 和可应用 *-no-* 规则</a></p>\n<ul>\n<li><a href=\"#%E9%A2%9C%E8%89%B2\">颜色</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"关于规则名称\"><a href=\"#%E5%85%B3%E4%BA%8E%E8%A7%84%E5%88%99%E5%90%8D%E7%A7%B0\" class=\"phenomic-HeadingAnchor\">#</a>关于规则名称</h2>\n<p>规则名称是：</p>\n<ul>\n<li>由连字符分隔的小写单词组成</li>\n<li>分为两部分</li>\n</ul>\n<p>第一部分描述了规则适用的<a href=\"http://apps.workflower.fi/vocabs/css/en\"><em>事物</em></a>。第二部分描述了规则检查的内容。</p>\n<p>例如：</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"number-leading-zero\"</span>\n<span class=\"hljs-comment\">// ↑          ↑</span>\n<span class=\"hljs-comment\">// 事物       规则检查的内容</span></code></pre>\n<p>当规则适用于整个样式表时，没有第一部分。</p>\n<p>例如：</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"no-eol-whitespace\"</span>\n<span class=\"hljs-string\">\"indentation\"</span>\n<span class=\"hljs-comment\">//    ↑</span>\n<span class=\"hljs-comment\">// 规则检查的内容</span></code></pre>\n<h3 id=\"否定规则\"><a href=\"#%E5%90%A6%E5%AE%9A%E8%A7%84%E5%88%99\" class=\"phenomic-HeadingAnchor\">#</a>否定规则</h3>\n<p>大多数规则要求<em>或</em>禁止某些内容。</p>\n<p>例如，数字必须<em>有</em>或<em>无</em>前导零：</p>\n<ul>\n<li>\n<p><code>number-leading-zero</code>: <code>string - \"always\"|\"never\"</code></p>\n<ul>\n<li><code>\"always\"</code> -   <em>必须有</em>前导 0</li>\n<li><code>\"never\"</code> -   <em>必须无</em>前导 0</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"hljs   language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">0.5</span>; }\n<span class=\"hljs-comment\">/**              ↑\n *          这个前导零 */</span></code></pre>\n<p>然而，有些规则<em>只是禁止</em>某些事物。这些规则在其名称中包含 <code>*-no-*</code>。</p>\n<p>例如，是否应禁止空块：</p>\n<ul>\n<li><code>block-no-empty</code> -   块<em>必须不</em>为空</li>\n</ul>\n<pre><code class=\"hljs   language-css\"><span class=\"hljs-selector-tag\">a</span> {   }\n<span class=\"hljs-comment\">/** ↑\n * 像这样的块 */</span></code></pre>\n<p>请注意，对于这样的规则，如果有一个强制执行相反的选项，即每个块<em>必须</em>为空，则没有意义。</p>\n<h3 id=\"最大和最小规则\"><a href=\"#%E6%9C%80%E5%A4%A7%E5%92%8C%E6%9C%80%E5%B0%8F%E8%A7%84%E5%88%99\" class=\"phenomic-HeadingAnchor\">#</a>最大和最小规则</h3>\n<p><code>*-max-*</code> 和 <code>*-min-*</code> 规则用于<em>设置限制</em>。</p>\n<p>例如，用一个数值指定数字中“.”之后的最大位数：</p>\n<ul>\n<li><code>number-max-precision</code>: <code>int</code></li>\n</ul>\n<pre><code class=\"hljs   language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">1.333em</span>; }\n<span class=\"hljs-comment\">/**             ↑\n * \".\" 之后最大的数字位数 */</span></code></pre>\n<h3 id=\"空白符规则\"><a href=\"#%E7%A9%BA%E7%99%BD%E7%AC%A6%E8%A7%84%E5%88%99\" class=\"phenomic-HeadingAnchor\">#</a>空白符规则</h3>\n<p>空格规则允许您指定是否必须在样式表的某个特定部分中使用空行，单个空格，换行符或无空白符。</p>\n<p>空白符规则组合了两组关键字：</p>\n<ul>\n<li><code>before</code>、<code>after</code> 和 <code>inside</code> 用于指定预期空格（如果有）的位置</li>\n<li><code>empty-line</code>、<code>space</code> 和 <code>newline</code> 用于指定是否需要单个空行，单个空格，单个换行符或无空白符</li>\n</ul>\n<p>例如，指定样式表中的所有注释之前是否必须有一个空行或无空白符：</p>\n<ul>\n<li><code>comment-empty-line-before</code>: <code>string</code> -   <code>\"always\"|\"never\"</code></li>\n</ul>\n<pre><code class=\"hljs   language-css\"><span class=\"hljs-selector-tag\">a</span> {}\n           ←\n<span class=\"hljs-comment\">/* 注释 */</span> ↑\n           ↑\n<span class=\"hljs-comment\">/**        ↑\n * 这个空行 */</span></code></pre>\n<p>此外，一些空白符规则使用另一组关键字：</p>\n<ul>\n<li><code>comma</code>、<code>colon</code>、<code>semicolon</code>、<code>opening-brace</code>、<code>closing-brace</code>、<code>opening-parenthesis</code>、<code>closing-parenthesis</code>、<code>operator</code> 或 <code>range-operator</code> 用于<em>事物</em>中指定的标点具体部位</li>\n</ul>\n<p>例如，指定函数中的逗号后是否必须包含单个空格或无空白符：</p>\n<ul>\n<li><code>function-comma-space-after</code>: <code>string</code> -   <code>\"always\"|\"never\"</code></li>\n</ul>\n<pre><code class=\"hljs   language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">translate</span>(1, 1) }\n<span class=\"hljs-comment\">/**                       ↑\n *               这个逗号之后的空格 */</span></code></pre>\n<p>标点符号的复数用于 <code>inside</code> 规则。例如，指定位于函数括号内必须的单个空格或无空白符：</p>\n<ul>\n<li><code>function-parentheses-space-inside</code>: <code>string</code> -   <code>\"always\"|\"never\"</code></li>\n</ul>\n<pre><code class=\"hljs   language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">translate</span>( 1, 1 ); }\n<span class=\"hljs-comment\">/**                     ↑      ↑\n *                这两个括号内的空格 */</span></code></pre>\n<h2 id=\"规则协同工作\"><a href=\"#%E8%A7%84%E5%88%99%E5%8D%8F%E5%90%8C%E5%B7%A5%E4%BD%9C\" class=\"phenomic-HeadingAnchor\">#</a>规则协同工作</h2>\n<p>这些规则可以一起使用以强制执行严格的约定。</p>\n<h3 id=\"-newlinespace-before-和--newlinespace-after-规则\"><a href=\"#-newlinespace-before-%E5%92%8C--newlinespace-after-%E8%A7%84%E5%88%99\" class=\"phenomic-HeadingAnchor\">#</a><code>*-newline/space-before</code> 和 <code>*-newline/space-after</code> 规则</h3>\n<p>假设您希望每个声明当中的冒号之前无空白符，冒号之后只有一个空格：</p>\n<pre><code class=\"hljs   language-css\"><span class=\"hljs-selector-tag\">a</span> { <span class=\"hljs-attribute\">color</span>: pink; }\n<span class=\"hljs-comment\">/**      ↑\n * 此冒号前无空白符，此冒号后有一个空格 */</span></code></pre>\n<p>您可以用以下方法强制执行：</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"declaration-colon-space-after\"</span>: <span class=\"hljs-string\">\"always\"</span>,\n<span class=\"hljs-string\">\"declaration-colon-space-before\"</span>: <span class=\"hljs-string\">\"never\"</span></code></pre>\n<p>某些<em>事物</em>（例如声明块和值列表）可以跨越多行。在这些情况下，可以使用 <code>newline</code> 规则和额外选项来提供灵活性。</p>\n<p>例如，这是一套完整的 <code>value-list-comma-*</code> 规则及其选项：</p>\n<ul>\n<li><code>value-list-comma-space-after</code>: <code>\"always\"|\"never\"|\"always-single-line\"|\"never-single-line\"</code></li>\n<li><code>value-list-comma-space-before</code>: <code>\"always\"|\"never\"|\"always-single-line\"|\"never-single-line\"</code></li>\n<li><code>value-list-comma-newline-after</code>: <code>\"always\"|\"always-multi-line|\"never-multi-line\"</code></li>\n<li><code>value-list-comma-newline-before</code>: <code>\"always\"|\"always-multi-line\"|\"never-multi-line\"</code></li>\n</ul>\n<p>其中 <code>*-multi-line</code> 和 <code>*-single-line</code> 引用了值列表（<em>事物</em>）。例如，给定：</p>\n<pre><code class=\"hljs   language-css\"><span class=\"hljs-selector-tag\">a</span>,\n<span class=\"hljs-selector-tag\">b</span> {\n  <span class=\"hljs-attribute\">color</span>: red;\n  <span class=\"hljs-attribute\">font-family</span>: sans, serif, monospace; <span class=\"hljs-comment\">/* 单行值列表 */</span>\n}              ↑                    ↑\n<span class=\"hljs-comment\">/**            ↑                    ↑\n *           值列表开始于这里，结束于这里 */</span></code></pre>\n<p>此示例中只有单行值列表。选择器、声明块和规则是多行的。这就是 <code>*-multi-line</code> 和 <code>*-single-line</code> 在此规则的上下文中引用的内容。</p>\n<h4 id=\"示例-a\"><a href=\"#%E7%A4%BA%E4%BE%8B-a\" class=\"phenomic-HeadingAnchor\">#</a>示例 A</h4>\n<p>假设您只想允许单行值列表。并且您希望逗号之前无空白符，逗号之后只有一个空格：</p>\n<pre><code class=\"hljs   language-css\"><span class=\"hljs-selector-tag\">a</span> {\n  <span class=\"hljs-attribute\">font-family</span>: sans, serif, monospace;\n  <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> red, <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> blue inset, <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">2px</span> blue inset;\n}</code></pre>\n<p>您可以用以下方法强制执行：</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"value-list-comma-space-after\"</span>: <span class=\"hljs-string\">\"always\"</span>,\n<span class=\"hljs-string\">\"value-list-comma-space-before\"</span>: <span class=\"hljs-string\">\"never\"</span></code></pre>\n<h4 id=\"示例-b\"><a href=\"#%E7%A4%BA%E4%BE%8B-b\" class=\"phenomic-HeadingAnchor\">#</a>示例 B</h4>\n<p>假设您要同时允许单行和多行值列表。您希望单行列表中的逗号之后有一个空格，而单行和多行列表中的逗号之前无空白符：</p>\n<pre><code class=\"hljs   language-css\"><span class=\"hljs-selector-tag\">a</span> {\n  <span class=\"hljs-attribute\">font-family</span>: sans, serif, monospace; <span class=\"hljs-comment\">/* 单行值列表，逗号之后有一个空格，但逗号之前无空白符 */</span>\n  <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> red, <span class=\"hljs-comment\">/* 多行值列表，... */</span>\n    <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> blue inset, <span class=\"hljs-comment\">/* ... 逗号之后有一个换行符, ...  */</span>\n    <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">2px</span> blue inset; <span class=\"hljs-comment\">/* ... 但逗号之前无空白符 */</span>\n}</code></pre>\n<p>您可以用以下方法强制执行：</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"value-list-comma-newline-after\"</span>: <span class=\"hljs-string\">\"always-multi-line\"</span>,\n<span class=\"hljs-string\">\"value-list-comma-space-after\"</span>: <span class=\"hljs-string\">\"always-single-line\"</span>,\n<span class=\"hljs-string\">\"value-list-comma-space-before\"</span>: <span class=\"hljs-string\">\"never\"</span></code></pre>\n<h4 id=\"示例-c\"><a href=\"#%E7%A4%BA%E4%BE%8B-c\" class=\"phenomic-HeadingAnchor\">#</a>示例 C</h4>\n<p>假设您要同时允许单行和多行值列表。您希望单行列表中的逗号之前无空白符，并且两种列表中的逗号后面始终都是空格：</p>\n<pre><code class=\"hljs   language-css\"><span class=\"hljs-selector-tag\">a</span> {\n  <span class=\"hljs-attribute\">font-family</span>: sans, serif, monospace;\n  <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> red\n    , <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> blue inset\n    , <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">2px</span> blue inset;\n}</code></pre>\n<p>您可以用以下方法强制执行：</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"value-list-comma-newline-before\"</span>: <span class=\"hljs-string\">\"always-multi-line\"</span>,\n<span class=\"hljs-string\">\"value-list-comma-space-after\"</span>: <span class=\"hljs-string\">\"always\"</span>,\n<span class=\"hljs-string\">\"value-list-comma-space-before\"</span>: <span class=\"hljs-string\">\"never-single-line\"</span></code></pre>\n<h4 id=\"示例-d\"><a href=\"#%E7%A4%BA%E4%BE%8B-d\" class=\"phenomic-HeadingAnchor\">#</a>示例 D</h4>\n<p>最后，规则足够灵活，可以对单行和多行列表强制执行完全不同的约定。假设您要同时允许单行和多行值列表。您希望单行列表在冒号之前和之后具有单个空格。您希望多行列表在逗号之前有一个换行符，但之后无空白符：</p>\n<pre><code class=\"hljs   language-css\"><span class=\"hljs-selector-tag\">a</span> {\n  <span class=\"hljs-attribute\">font-family</span>: sans , serif , monospace; <span class=\"hljs-comment\">/* single-line list with a single space before and after the comma */</span>\n  <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> red <span class=\"hljs-comment\">/* multi-line list ... */</span>\n    ,<span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> blue inset <span class=\"hljs-comment\">/* ... with newline before, ...  */</span>\n    ,<span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">2px</span> blue inset; <span class=\"hljs-comment\">/* ... but no space after the comma */</span>\n}</code></pre>\n<p>您可以用以下方法强制执行：</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"value-list-comma-newline-after\"</span>: <span class=\"hljs-string\">\"never-multi-line\"</span>,\n<span class=\"hljs-string\">\"value-list-comma-newline-before\"</span>: <span class=\"hljs-string\">\"always-multi-line\"</span>,\n<span class=\"hljs-string\">\"value-list-comma-space-after\"</span>: <span class=\"hljs-string\">\"always-single-line\"</span>,\n<span class=\"hljs-string\">\"value-list-comma-space-before\"</span>: <span class=\"hljs-string\">\"always-single-line\"</span></code></pre>\n<h3 id=\"-empty-line-before-和--max-empty-lines-规则\"><a href=\"#-empty-line-before-%E5%92%8C--max-empty-lines-%E8%A7%84%E5%88%99\" class=\"phenomic-HeadingAnchor\">#</a><code>*-empty-line-before</code> 和 <code>*-max-empty-lines</code> 规则</h3>\n<p>这些规则共同控制不同位置允许的空行。</p>\n<p>每个<em>事物</em>负责将自己推动<em>前面的事物</em>，而不是推动<em>后续的事物</em>。这种一致性是为了避免冲突，这就是为什么 stylelint 中没有任何 <code>*-empty-line-after</code> 规则。</p>\n<p>假设您要强制执行以下操作：</p>\n<pre><code class=\"hljs   language-css\"><span class=\"hljs-selector-tag\">a</span> {\n  <span class=\"hljs-attribute\">background</span>: green;\n  <span class=\"hljs-attribute\">color</span>: red;\n\n  @media (<span class=\"hljs-attribute\">min-width</span>: <span class=\"hljs-number\">30em</span>) {\n    color: blue;\n  }\n}\n\n<span class=\"hljs-selector-tag\">b</span> {\n  <span class=\"hljs-attribute\">--custom-property</span>: green;\n\n  <span class=\"hljs-attribute\">background</span>: pink;\n  <span class=\"hljs-attribute\">color</span>: red;\n}</code></pre>\n<p>您可以这样做：</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"at-rule-empty-line-before\"</span>: [<span class=\"hljs-string\">\"always\"</span>, {\n  <span class=\"hljs-string\">\"except\"</span>: [<span class=\"hljs-string\">\"first-nested\"</span>]\n}],\n<span class=\"hljs-string\">\"custom-property-empty-line-before\"</span>: [ <span class=\"hljs-string\">\"always\"</span>, {\n  <span class=\"hljs-string\">\"except\"</span>: [\n    <span class=\"hljs-string\">\"after-custom-property\"</span>,\n    <span class=\"hljs-string\">\"first-nested\"</span>\n  ]\n}],\n<span class=\"hljs-string\">\"declaration-empty-line-before\"</span>: [<span class=\"hljs-string\">\"always\"</span>, {\n  <span class=\"hljs-string\">\"except\"</span>: [\n    <span class=\"hljs-string\">\"after-declaration\"</span>,\n    <span class=\"hljs-string\">\"first-nested\"</span>\n  ]\n}],\n<span class=\"hljs-string\">\"block-closing-brace-empty-line-before\"</span>: <span class=\"hljs-string\">\"never\"</span>,\n<span class=\"hljs-string\">\"rule-empty-line-before\"</span>: [<span class=\"hljs-string\">\"always-multi-line\"</span>]</code></pre>\n<p>我们建议您将主要选项（例如 <code>\"always\"</code> 或 <code>\"never\"</code>）设置为最普遍的风格，并使用 <code>except</code> 可选的辅助选项定义例外。<code>except</code> 选项有很多值，例如 <code>first-nested</code>、<code>after-comment</code> 等。</p>\n<p><code>*-empty-line-before</code> 规则控制在<em>事物</em>之前不要或者必须空<em>一行或多行</em>空行。<code>*-max-empty-lines</code> 规则通过控制<em>事物</em>中的<em>空行数</em>。<code>max-empty-lines</code> 规则用于设置整个源码的限制。然后可以使用诸如 <code>function-max-empty-lines</code>、<code>selector-max-empty-lines</code> 和 <code>value-list-max-empty-lines</code> 之类的规则来更严格的设置 <em>事物</em> 内的空行限制。</p>\n<p>例如，假设您要强制执行以下操作：</p>\n<pre><code class=\"hljs   language-css\"><span class=\"hljs-selector-tag\">a</span>,\n<span class=\"hljs-selector-tag\">b</span> {\n  <span class=\"hljs-attribute\">box-shadow</span>:\n    inset <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">#dcffa6</span>,\n    <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">5px</span> <span class=\"hljs-number\">#000</span>;\n}\n\n<span class=\"hljs-selector-tag\">c</span> {\n  <span class=\"hljs-attribute\">transform</span>:\n    <span class=\"hljs-built_in\">translate</span>(\n      1,\n      1\n    );\n}</code></pre>\n<p>即整个源码中最多有 1 个空行，但函数，选择器列表和值列表中没有空行。</p>\n<p>您可以这样做：</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"function-max-empty-lines\"</span>: <span class=\"hljs-number\">0</span>,\n<span class=\"hljs-string\">\"max-empty-lines\"</span>: <span class=\"hljs-number\">1</span>,\n<span class=\"hljs-string\">\"selector-list-max-empty-lines\"</span>: <span class=\"hljs-number\">0</span>,\n<span class=\"hljs-string\">\"value-list-max-empty-lines\"</span>: <span class=\"hljs-number\">0</span></code></pre>\n<h3 id=\"-whitelist、-blacklist、color-named-和可应用--no--规则\"><a href=\"#-whitelist%E3%80%81-blacklist%E3%80%81color-named-%E5%92%8C%E5%8F%AF%E5%BA%94%E7%94%A8--no--%E8%A7%84%E5%88%99\" class=\"phenomic-HeadingAnchor\">#</a><code>*-whitelist</code>、<code>*-blacklist</code>、<code>color-named</code> 和可应用 <code>*-no-*</code> 规则</h3>\n<p>这些规则协同工作用以允许（或禁止）语言特征和结构。</p>\n<p>这里有针对 CSS 语言的主要结构的 <code>*-whitelist</code> 和 <code>*-blacklist</code> 规则：@规则，函数，声明（即属性-值对），属性和单位。这些规则可用于允许（或禁止）使用这些结构的任何语言特性（例如 <code>@media</code>、<code>rgb()</code>）。但是，有些功能没有被这些 <code>*-whitelist</code> 和 <code>*-blacklist</code> 规则捕获（或者只需要复杂的正则表达式来配置）。有一些单独的规则，通常是 <code>*-no-*</code> 规则（例如 <code>color-no-hex</code> 和 <code>selector-no-id</code>），以禁止这些功能。</p>\n<p>假设您想禁止 <code>@debug</code> 语言扩展。您可以使用 <code>at-rule-blacklist</code> 或 <code>at-rule-whitelist</code> 规则来执行此操作，因为 <code>@debug</code> 语言扩展使用@规则 构造，例如：</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"at-rule-blacklist\"</span>: [<span class=\"hljs-string\">\"debug\"</span>]</code></pre>\n<p>假设您无论出于何种原因，想要禁止全部@规则构造。您可以这样做：</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"at-rule-whitelist\"</span>: []</code></pre>\n<p>假设您要禁用 <code>border</code> 属性的值 <code>none</code>。您可以使用 <code>declaration-property-value-blacklist</code> 或 <code>declaration-property-value-whitelist</code> 来做到这一点，例如</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"declaration-property-value-blacklist\"</span>: [{\n  <span class=\"hljs-string\">\"/^border/\"</span>: [<span class=\"hljs-string\">\"none\"</span>]\n}]</code></pre>\n<h4 id=\"颜色\"><a href=\"#%E9%A2%9C%E8%89%B2\" class=\"phenomic-HeadingAnchor\">#</a>颜色</h4>\n<p>大部分 <code>&#x3C;颜色></code> 值是<em>函数</em>。因此，可以使用 <code>function-blacklist</code> 或 <code>function-whitelist</code> 规则允许（或禁止）它们。还有两种不是函数的颜色表示法：命名颜色和 16 进制颜色。允许（或禁止）这两个特定的规则：<code>color-named</code> 和 <code>color-no-hex</code>。</p>\n<p>假设您要强制执行 <em>如果颜色有相应的命名</em> 则使用命名颜色，否则使用使用 <code>hwb</code> 颜色，例如：</p>\n<pre><code class=\"hljs   language-css\"><span class=\"hljs-selector-tag\">a</span> {\n  <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-built_in\">hwb</span>(235, 0%, 0%); <span class=\"hljs-comment\">/* 此颜色没有相应的命名 */</span>\n  <span class=\"hljs-attribute\">color</span>: black;\n}</code></pre>\n<p>如果您采用白名单方法，您可以这样做：</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"color-named\"</span>: <span class=\"hljs-string\">\"always-where-possible\"</span>,\n<span class=\"hljs-string\">\"color-no-hex\"</span>: <span class=\"hljs-literal\">true</span>,\n<span class=\"hljs-string\">\"function-whitelist\"</span>: [<span class=\"hljs-string\">\"hwb\"</span>]</code></pre>\n<p>或者，如果您采用黑名单方法：</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"color-named\"</span>: <span class=\"hljs-string\">\"always-where-possible\"</span>,\n<span class=\"hljs-string\">\"color-no-hex\"</span>: <span class=\"hljs-literal\">true</span>,\n<span class=\"hljs-string\">\"function-blacklist\"</span>: [<span class=\"hljs-string\">\"/^rgb/\"</span>, <span class=\"hljs-string\">\"/^hsl/\"</span>, <span class=\"hljs-string\">\"gray\"</span>]</code></pre>\n<p>这种方法可以扩展使用到语言扩展（使用@规则和函数这两个内置可扩展语法结构）时。例如，假设您要禁止所有标准颜色表示法，而使用自定义颜色表示法，例如 <code>my-color(red with a dash of green / 5%)</code>。您可以这样做：</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"color-named\"</span>: <span class=\"hljs-string\">\"never\"</span>,\n<span class=\"hljs-string\">\"color-no-hex\"</span>: <span class=\"hljs-literal\">true</span>,\n<span class=\"hljs-string\">\"function-whitelist\"</span>: [<span class=\"hljs-string\">\"my-color\"</span>]</code></pre>\n","__filename":"user-guide/about-rules.md","__url":"/user-guide/about-rules/","__resourceUrl":"/user-guide/about-rules/index.html","__dataUrl":"/user-guide/about-rules/index.html.603cd84cb548131a41b280a0d2b4f30a.json"}