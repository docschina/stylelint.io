{"head":{"description":"CSS 处理器 代码检查工具支持当前和未来的CSS语法。这包括所有标准 CSS，也包括使用标准 CSS 语法结构的特殊功能，例如特殊的@规则，特殊属性和特殊功能。一些类CSS语言扩展 -- 使用非标准语法结构的特性 --…","title":"CSS 处理器"},"body":"<h1 id=\"css-处理器\"><a href=\"#css-%E5%A4%84%E7%90%86%E5%99%A8\" class=\"phenomic-HeadingAnchor\">#</a>CSS 处理器</h1>\n<p>代码检查工具支持当前和未来的CSS语法。这包括所有标准 CSS，也包括使用标准 CSS 语法结构的特殊功能，例如特殊的@规则，特殊属性和特殊功能。一些<em>类</em>CSS语言扩展 -- 使用非标准语法结构的特性 -- 因此受到支持；然而，由于存在无限的处理可能性，因此代码检查工具不能支持所有内容。</p>\n<p>您可以在 CSS 处理器之前或之后运行代码检查工具。根据您使用的处理器，每种方法都有警告：</p>\n<ol>\n<li><em>之前</em>：某些插件/处理器可能启用与代码检查工具不兼容的语法。</li>\n<li><em>之后</em>：某些插件/处理器可能会生成对您的代码检查工具配置不符的 CSS，从而导致与原始样式表不对应的违规。</li>\n</ol>\n<p><em>在这两种情况下，您可以关闭不兼容的代码检查工具规则，或者停止使用不兼容的插件/处理器。</em> 您还可以请求插件/处理器作者提供替代的格式化选项以便与 stylelint 兼容。</p>\n<h2 id=\"解析非标准语法\"><a href=\"#%E8%A7%A3%E6%9E%90%E9%9D%9E%E6%A0%87%E5%87%86%E8%AF%AD%E6%B3%95\" class=\"phenomic-HeadingAnchor\">#</a>解析非标准语法</h2>\n<p>stylelint 将根据以下信息自动推断出以下语法：</p>\n<ul>\n<li>文件扩展名</li>\n<li>HTML 中的 <code>&#x3C;style></code> 标签的 <code>type</code> 或 <code>lang</code> 属性</li>\n<li>Markdown 中 <a href=\"https://help.github.com/articles/creating-and-highlighting-code-blocks/\">GFM 受控代码块</a>上的<a href=\"https://github.github.com/gfm/#info-string\">信息字符串</a></li>\n</ul>\n<p>但是，您可以强制使用特定语法。<a href=\"../cli/\">命令行界面</a>和 <a href=\"../node-api/\">Node.js 应用程序接口</a>都暴露了 <code>syntax</code> 选项。</p>\n<ul>\n<li>如果您正在使用命令行界面，请使用 <code>syntax</code> 标志，如下所示：<code>stylelint ... --syntax scss</code>。</li>\n<li>如果您正在使用Node.js 应用程序接口，请传递 <code>syntax</code> 选项，如下所示：<code>stylelint.lint({ syntax: \"sugarss\", ... })</code>。</li>\n</ul>\n<p>使用命令行界面或 Node.js 应用程序接口时，stylelint 还可以接受自定义 <a href=\"https://github.com/postcss/postcss#syntaxes\">PostCSS 兼容语法</a>。对于自定义语法，分别使用 <code>custom-syntax</code> 和 <code>customSyntax</code> 选项。</p>\n<ul>\n<li>如果您正在使用命令行界面，请使用 <code>custom-syntax</code> 标志，如下所示：<code>stylelint ... --custom-syntax custom-syntax-module</code> 或 <code>stylelint ... --custom-syntax ./path/to/custom-syntax-module</code>。</li>\n<li>如果您正在使用Node.js 应用程序接口，请传递 <code>customSyntax</code> 选项，如下所示：<code>stylelint.lint({ customSyntax: path.join(process.cwd(), './path/to/custom-syntax-module') , ... })</code>。</li>\n</ul>\n<p>如果您将代码检查工具作为<a href=\"../postcss-plugin/\">PostCSS插件</a>使用，您应该将特殊的 <code>postcss-syntax</code> 直接用于 PostCSS 的 <code>syntax</code> 选项，如下所示：</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> postcss = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"postcss\"</span>)\n<span class=\"hljs-keyword\">var</span> syntax = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"postcss-syntax\"</span>)\n\npostcss([\n  <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"stylelint\"</span>),\n  <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"reporter\"</span>)\n])\n  .process(css, {\n    <span class=\"hljs-attr\">from</span>: <span class=\"hljs-string\">\"lib/app.css\"</span>,\n    <span class=\"hljs-attr\">syntax</span>: syntax\n  })\n})</code></pre>\n","__filename":"user-guide/css-processors.md","__url":"/user-guide/css-processors/","__resourceUrl":"/user-guide/css-processors/index.html","__dataUrl":"/user-guide/css-processors/index.html.57d54a0472d625649a6441f757959358.json"}