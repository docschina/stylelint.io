{"head":{"description":"stylelint PostCSS 插件 与任何其他 PostCSS 插件一样，您可以使用 stylelint 的 PostCSS 插件，可以使用 PostCSS 运行器，也可以直接使用 PostCSS JS 应用程序接口。 但是，如果专用的 stylelint…","title":"stylelint PostCSS 插件"},"body":"<h1 id=\"stylelint-postcss-插件\"><a href=\"#stylelint-postcss-%E6%8F%92%E4%BB%B6\" class=\"phenomic-HeadingAnchor\">#</a>stylelint PostCSS 插件</h1>\n<p>与任何其他 <a href=\"https://github.com/postcss/postcss#plugins\">PostCSS 插件</a>一样，您可以使用 stylelint 的 PostCSS 插件，可以使用 <a href=\"https://github.com/postcss/postcss#runners\">PostCSS 运行器</a>，也可以直接使用 PostCSS JS 应用程序接口。</p>\n<p><em>但是，如果专用的 stylelint 任务运行插件<a href=\"../complementary-tools/\">可用</a>（例如 <a href=\"https://github.com/olegskl/gulp-stylelint\">gulp-stylelint</a> 或 <a href=\"https://github.com/wikimedia/grunt-stylelint\">grunt-stylelint</a>）我们建议您使用该插件而不是此插件，因为它们可以提供更好的报告。</em></p>\n<ul>\n<li><a href=\"#%E5%AE%89%E8%A3%85\">安装</a></li>\n<li>\n<p><a href=\"#%E9%80%89%E9%A1%B9\">选项</a></p>\n<ul>\n<li><a href=\"#config\">config</a></li>\n<li><a href=\"#configfile\">configFile</a></li>\n<li><a href=\"#configbasedir\">configBasedir</a></li>\n<li><a href=\"#configoverrides\">configOverrides</a></li>\n<li><a href=\"#ignoredisables\">ignoreDisables</a></li>\n<li><a href=\"#ignorepath\">ignorePath</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E7%94%A8%E6%B3%95%E7%A4%BA%E4%BE%8B\">用法示例</a></p>\n<ul>\n<li><a href=\"#%E7%A4%BA%E4%BE%8B-a\">示例 A</a></li>\n<li><a href=\"#%E7%A4%BA%E4%BE%8B-b\">示例 B</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"安装\"><a href=\"#%E5%AE%89%E8%A3%85\" class=\"phenomic-HeadingAnchor\">#</a>安装</h2>\n<p>stylelint 是一个 <a href=\"https://www.npmjs.com/package/stylelint\">npm 包</a>。它使用命令安装：</p>\n<pre><code class=\"hljs language-console\">npm install stylelint --save-dev</code></pre>\n<h2 id=\"选项\"><a href=\"#%E9%80%89%E9%A1%B9\" class=\"phenomic-HeadingAnchor\">#</a>选项</h2>\n<p>该插件接受选项对象作为参数，具有以下属性：</p>\n<h3 id=\"config\"><a href=\"#config\" class=\"phenomic-HeadingAnchor\">#</a><code>config</code></h3>\n<p><a href=\"../configuration/\">stylelint 配置对象</a>。</p>\n<p>如果没有传递 <code>config</code> 或 <code>configFile</code>，stylelint 将使用<a href=\".././configuration/#%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE%E5%AF%B9%E8%B1%A1\">配置查找算法</a>来查找正确的配置。</p>\n<h3 id=\"configfile\"><a href=\"#configfile\" class=\"phenomic-HeadingAnchor\">#</a><code>configFile</code></h3>\n<p>包含 <a href=\"../configuration/\">stylelint 配置对象</a>的 JSON、YAML 或 JS 文件的路径。</p>\n<p>它应该是绝对路径或您的进程运行目录（<code>process.cwd()</code>）的相对路径。我们建议使用绝对路径。</p>\n<h3 id=\"configbasedir\"><a href=\"#configbasedir\" class=\"phenomic-HeadingAnchor\">#</a><code>configBasedir</code></h3>\n<p>绝对路径，定义 <code>extends</code> 和 <code>plugins</code> 的相对路径 <em>相对于</em> 的目录。</p>\n<p>只有在直接通过 <code>config</code> 属性传递对象时才需要这样做。如果您用了 <code>configFile</code>，则这个选项不是必需的。</p>\n<p>如果传递的 <code>config</code> 对象使用相对路径，例如用于 <code>extends</code> 或 <code>plugins</code>，您必须传递 <code>configBasedir</code>。如果没有使用相对路径，则无需这个属性。</p>\n<h3 id=\"configoverrides\"><a href=\"#configoverrides\" class=\"phenomic-HeadingAnchor\">#</a><code>configOverrides</code></h3>\n<p>部分 stylelint 配置对象，其属性将覆盖现有的配置对象，无论该配置是通过 <code>config</code> 选项还是 <code>.stylelintrc</code> 文件加载的。</p>\n<p><code>configOverrides</code> 和 <code>config</code> 选项之间的区别在于：如果传递了任何 <code>config</code> 对象，则 stylelint 不会去寻找 <code>.stylelintrc</code> 文件而只是使用您传递的 <code>config</code> 对象；但如果您想加载 <code>.stylelintrc</code> 文件 <em>并且</em> 覆盖它的特定部分，<code>configOverrides</code> 就是做这个的。</p>\n<h3 id=\"ignoredisables\"><a href=\"#ignoredisables\" class=\"phenomic-HeadingAnchor\">#</a><code>ignoreDisables</code></h3>\n<p>如果为 <code>true</code>，则将忽略所有禁用注释（例如 <code>/* stylelint-disable block-no-empty */</code>）。</p>\n<p>您可以使用此选项查看没有这些例外情况时您的检查结果会是什么样的。</p>\n<h3 id=\"ignorepath\"><a href=\"#ignorepath\" class=\"phenomic-HeadingAnchor\">#</a><code>ignorePath</code></h3>\n<p>包含描述要忽略的文件的模式的文件的路径。路径可以是绝对路径或 <code>process.cwd()</code> 的相对路径。默认情况下，stylelint 在 <code>process.cwd()</code> 中查找 <code>.stylelintignore</code>。请参阅<a href=\"../configuration/#stylelintignore\">配置</a>。</p>\n<h2 id=\"用法示例\"><a href=\"#%E7%94%A8%E6%B3%95%E7%A4%BA%E4%BE%8B\" class=\"phenomic-HeadingAnchor\">#</a>用法示例</h2>\n<p>我们建议您在应用任何转换之前检查 CSS。您可以这样做：</p>\n<ul>\n<li>创建独立的lint任务，该任务独立于构建任务。</li>\n<li>使用 <a href=\"https://github.com/postcss/postcss-import\"><code>postcss-import</code></a> 的 <a href=\"https://github.com/postcss/postcss-import#plugins\"><code>plugins</code> option</a> 或 <a href=\"https://github.com/TrySound/postcss-easy-import\"><code>postcss-easy-import</code></a> 在进行任何转换之前检查文件。</li>\n<li>将 stylelint 放在插件管道的开头。</li>\n</ul>\n<p>您还需要一个报告生成器。<em>stylelint 插件通过 PostCSS 注册警告</em> 。因此，您需要用于打印警告的 PostCSS 运行器或插件，其目的是格式化和打印警告（例如 <a href=\"https://github.com/postcss/postcss-reporter\"><code>postcss-reporter</code></a>）。</p>\n<h3 id=\"示例-a\"><a href=\"#%E7%A4%BA%E4%BE%8B-a\" class=\"phenomic-HeadingAnchor\">#</a>示例 A</h3>\n<p>一个单独的检查任务，通过 PostCSS JS 应用程序接口使用<a href=\"https://github.com/shellscape/postcss-less\"><code>postcss-less</code></a>和本插件来检查 Less。</p>\n<p><em>注意：stylelint PostCSS 插件与 stylelint 命令行界面和 Node.js 应用程序接口不同，没有 <code>syntax</code> 选项。相反，必须在 <a href=\"https://github.com/postcss/postcss#options\">PostCSS 选项</a>中设置语法，因为管道中只能有一个解析器/语法。</em></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"fs\"</span>)\n<span class=\"hljs-keyword\">var</span> less = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"postcss-less\"</span>)\n<span class=\"hljs-keyword\">var</span> postcss = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"postcss\"</span>)\n\n<span class=\"hljs-comment\">// 要处理的CSS</span>\n\n<span class=\"hljs-keyword\">var</span> css = fs.readFileSync(<span class=\"hljs-string\">\"input.css\"</span>, <span class=\"hljs-string\">\"utf8\"</span>)\n\npostcss([\n  <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"stylelint\"</span>)({ <span class=\"hljs-comment\">/* 您的选项 */</span> }),\n  <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"postcss-reporter\"</span>)({ <span class=\"hljs-attr\">clearReportedMessages</span>: <span class=\"hljs-literal\">true</span> })\n])\n  .process(css, {\n    <span class=\"hljs-attr\">from</span>: <span class=\"hljs-string\">\"input.css\"</span>,\n    <span class=\"hljs-attr\">syntax</span>: less\n  })\n  .then()\n  .catch(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =></span> <span class=\"hljs-built_in\">console</span>.error(err.stack))</code></pre>\n<p>相同的模式可用于检查 Less、SCSS 或 <a href=\"https://github.com/postcss/sugarss\">SugarSS</a> 语法。</p>\n<h3 id=\"示例-b\"><a href=\"#%E7%A4%BA%E4%BE%8B-b\" class=\"phenomic-HeadingAnchor\">#</a>示例 B</h3>\n<p>组合检查和构建任务，其中本插件通过 PostCSS JS 应用程序接口使用，但使用在 <a href=\"https://github.com/postcss/postcss-import\"><code>postcss-import</code></a> 中（利用其 <code>plugins</code> 选项），以便在进行任何转换之前对源文件进行检查。</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"fs\"</span>)\n<span class=\"hljs-keyword\">var</span> postcss = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"postcss\"</span>)\n<span class=\"hljs-keyword\">var</span> stylelint = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"stylelint\"</span>)\n\n<span class=\"hljs-comment\">// 要处理的CSS</span>\n<span class=\"hljs-keyword\">var</span> css = fs.readFileSync(<span class=\"hljs-string\">\"lib/app.css\"</span>, <span class=\"hljs-string\">\"utf8\"</span>)\n\npostcss(\n  [\n    <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"postcss-import\"</span>)({\n      <span class=\"hljs-attr\">plugins</span>: [\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"stylelint\"</span>)({ <span class=\"hljs-comment\">/* 您的选项 */</span> })\n      ]\n    }),\n    <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"postcss-cssnext\"</span>),\n    <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"postcss-reporter\"</span>)({ <span class=\"hljs-attr\">clearReportedMessages</span>: <span class=\"hljs-literal\">true</span> })\n  ]\n)\n  .process(css, { <span class=\"hljs-attr\">from</span>: <span class=\"hljs-string\">'lib/app.css'</span>, <span class=\"hljs-attr\">to</span>: <span class=\"hljs-string\">'app.css'</span> })\n  .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{\n    fs.writeFileSync(<span class=\"hljs-string\">'app.css'</span>, result.css);\n    <span class=\"hljs-keyword\">if</span> ( result.map ) fs.writeFileSync(<span class=\"hljs-string\">'app.css.map'</span>, result.map);\n  })\n  .catch(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =></span> <span class=\"hljs-built_in\">console</span>.error(err.stack))</code></pre>\n","__filename":"user-guide/postcss-plugin.md","__url":"/user-guide/postcss-plugin/","__resourceUrl":"/user-guide/postcss-plugin/index.html","__dataUrl":"/user-guide/postcss-plugin/index.html.0b6446b14b4563aac517e2a75ff97713.json"}