{"head":{"description":"配置 代码检查工具需要一个配置对象。您可以制作自己的配置或继承现有配置。 加载配置对象 查找和加载配置对象由 cosmiconfig 完成。从当前工作目录开始，它将按以下顺序查找以下可能的源： package.json 中的 stylelint 属性 .stylelintrc…","title":"配置"},"body":"<h1 id=\"配置\"><a href=\"#%E9%85%8D%E7%BD%AE\" class=\"phenomic-HeadingAnchor\">#</a>配置</h1>\n<p>代码检查工具<em>需要一个配置对象</em>。您可以制作自己的配置或继承现有配置。</p>\n<ul>\n<li><a href=\"#%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE%E5%AF%B9%E8%B1%A1\">加载配置对象</a></li>\n<li>\n<p><a href=\"#%E9%85%8D%E7%BD%AE%E5%AF%B9%E8%B1%A1\">配置对象</a></p>\n<ul>\n<li>\n<p><a href=\"#rules\">rules</a></p>\n<ul>\n<li><a href=\"#%E5%9C%A8%E6%82%A8%E7%9A%84-css-%E4%B8%AD%E5%85%B3%E9%97%AD%E8%A7%84%E5%88%99\">在您的 CSS 中关闭规则</a></li>\n<li><a href=\"#%E4%B8%A5%E9%87%8D%E6%80%A7%EF%BC%9A%E9%94%99%E8%AF%AF%E5%92%8C%E8%AD%A6%E5%91%8A\">严重性：错误和警告</a></li>\n<li><a href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B6%88%E6%81%AF\">自定义消息</a></li>\n</ul>\n</li>\n<li><a href=\"#extends\">extends</a></li>\n<li><a href=\"#plugins\">plugins</a></li>\n<li><a href=\"#processors\">processors</a></li>\n<li><a href=\"#ignorefiles\">ignoreFiles</a></li>\n<li><a href=\"#defaultseverity\">defaultSeverity</a></li>\n</ul>\n</li>\n<li><a href=\"#stylelintignore\">.stylelintignore</a></li>\n</ul>\n<h2 id=\"加载配置对象\"><a href=\"#%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE%E5%AF%B9%E8%B1%A1\" class=\"phenomic-HeadingAnchor\">#</a>加载配置对象</h2>\n<p>查找和加载配置对象由 <a href=\"https://github.com/davidtheclark/cosmiconfig\">cosmiconfig</a> 完成。从当前工作目录开始，它将按以下顺序查找以下可能的源：</p>\n<ul>\n<li><code>package.json</code> 中的 <code>stylelint</code> 属性</li>\n<li><code>.stylelintrc</code> 文件</li>\n<li>导出JS对象的 <code>stylelint.config.js</code> 文件</li>\n</ul>\n<p><code>.stylelintrc</code> 文件（没有扩展名）可以是 JSON 或 YAML 格式。或者您可以添加文件扩展名以指定 JSON、YAML 或 JS 格式：<code>.stylelintrc.json</code>、<code>.stylelintrc.yaml</code>、<code>.stylelintrc.yml</code>、<code>.stylelintrc.js</code>。您可能希望使用扩展名，以便文本编辑器可以更好地解释文件，并帮助进行语法检查和高亮显示。</p>\n<p>找到并解析其中一个后，搜索将停止并将使用该对象。</p>\n<p>可以使用 <code>config</code> 或 <code>configFile</code> 选项绕过配置搜索。</p>\n<h2 id=\"配置对象\"><a href=\"#%E9%85%8D%E7%BD%AE%E5%AF%B9%E8%B1%A1\" class=\"phenomic-HeadingAnchor\">#</a>配置对象</h2>\n<p>配置对象可以具有以下属性。</p>\n<h3 id=\"rules\"><a href=\"#rules\" class=\"phenomic-HeadingAnchor\">#</a><code>rules</code></h3>\n<p>规则确定了代码检查工具寻找和指正的内容。在 stylelint 中有<a href=\"../rules/\">超过160条规则</a>。<em>默认情况下没有打开任何规则</em>，因此您可以在此处打开所有要检查的内容。必须将所有规则明确配置为<em>没有默认值</em>。</p>\n<p><code>rules</code>属性是<em>一个键作为规则名称，值作为规则配置的对象</em>。每条规则配置都符合以下格式之一：</p>\n<ul>\n<li>单个值（主选项）</li>\n<li>包含两个值的数组（<code>[主选项, 辅助选项]</code>）</li>\n<li><code>null</code>（关闭规则）</li>\n</ul>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"rules\"</span>: {\n    <span class=\"hljs-attr\">\"block-no-empty\"</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-attr\">\"color-no-invalid-hex\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">\"comment-empty-line-before\"</span>: [ <span class=\"hljs-string\">\"always\"</span>, {\n      <span class=\"hljs-attr\">\"ignore\"</span>: [<span class=\"hljs-string\">\"stylelint-commands\"</span>, <span class=\"hljs-string\">\"after-comment\"</span>]\n    } ],\n    <span class=\"hljs-attr\">\"declaration-colon-space-after\"</span>: <span class=\"hljs-string\">\"always\"</span>,\n    <span class=\"hljs-attr\">\"indentation\"</span>: [<span class=\"hljs-string\">\"tab\"</span>, {\n      <span class=\"hljs-attr\">\"except\"</span>: [<span class=\"hljs-string\">\"value\"</span>]\n    }],\n    <span class=\"hljs-attr\">\"max-empty-lines\"</span>: <span class=\"hljs-number\">2</span>,\n    <span class=\"hljs-attr\">\"rule-empty-line-before\"</span>: [ <span class=\"hljs-string\">\"always\"</span>, {\n      <span class=\"hljs-attr\">\"except\"</span>: [<span class=\"hljs-string\">\"first-nested\"</span>],\n      <span class=\"hljs-attr\">\"ignore\"</span>: [<span class=\"hljs-string\">\"after-comment\"</span>]\n    } ],\n    <span class=\"hljs-attr\">\"unit-whitelist\"</span>: [<span class=\"hljs-string\">\"em\"</span>, <span class=\"hljs-string\">\"rem\"</span>, <span class=\"hljs-string\">\"%\"</span>, <span class=\"hljs-string\">\"s\"</span>]\n  }\n}</code></pre>\n<p>指定主选项将启用规则。您可以在<a href=\"../example-config/\">示例配置</a>中找到主要规则选项的完整列表。</p>\n<p>要关闭规则（继承配置时），可以将规则的值设置为 <code>null</code>：</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"extends\"</span>: <span class=\"hljs-string\">\"stylelint-config-standard\"</span>,\n  <span class=\"hljs-attr\">\"rules\"</span>: {\n    <span class=\"hljs-attr\">\"at-rule-empty-line-before\"</span>: <span class=\"hljs-literal\">null</span>\n  }\n}</code></pre>\n<p>许多规则都有辅助选项作为进一步配置。要设置辅助选项，请使用两个成员的数组：</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"selector-pseudo-class-no-unknown\"</span>: [<span class=\"hljs-literal\">true</span>, {\n  <span class=\"hljs-string\">\"ignorePseudoClasses\"</span>: [<span class=\"hljs-string\">\"global\"</span>]\n}]</code></pre>\n<h4 id=\"在您的-css-中关闭规则\"><a href=\"#%E5%9C%A8%E6%82%A8%E7%9A%84-css-%E4%B8%AD%E5%85%B3%E9%97%AD%E8%A7%84%E5%88%99\" class=\"phenomic-HeadingAnchor\">#</a>在您的 CSS 中关闭规则</h4>\n<p>可以通过在CSS中使用特殊注释暂时关闭规则。例如，您可以关闭所有规则：</p>\n<pre><code class=\"hljs   language-css\"><span class=\"hljs-comment\">/* stylelint-disable */</span>\n<span class=\"hljs-selector-tag\">a</span> {}\n<span class=\"hljs-comment\">/* stylelint-enable */</span></code></pre>\n<p>或者您可以关闭个别规则：</p>\n<pre><code class=\"hljs   language-css\"><span class=\"hljs-comment\">/* stylelint-disable selector-no-id, declaration-no-important  */</span>\n<span class=\"hljs-selector-id\">#id</span> {\n  <span class=\"hljs-attribute\">color</span>: pink <span class=\"hljs-meta\">!important</span>;\n}\n<span class=\"hljs-comment\">/* stylelint-enable */</span></code></pre>\n<p>您可以使用 <code>/* stylelint-disable-line */</code> 注释关闭个别行的规则，之后您无需显式重新启用它们：</p>\n<pre><code class=\"hljs   language-css\"><span class=\"hljs-selector-id\">#id</span> { <span class=\"hljs-comment\">/* stylelint-disable-line */</span>\n  <span class=\"hljs-attribute\">color</span>: pink <span class=\"hljs-meta\">!important</span>; <span class=\"hljs-comment\">/* stylelint-disable-line declaration-no-important */</span>\n}</code></pre>\n<p>您还可以使用 <code>/* stylelint-disable-next-line */</code> 注释关闭<em>下一行</em>的规则，之后您无需显式重新启用它们：</p>\n<pre><code class=\"hljs   language-css\"><span class=\"hljs-selector-id\">#id</span> {\n  <span class=\"hljs-comment\">/* stylelint-disable-next-line declaration-no-important */</span>\n  <span class=\"hljs-attribute\">color</span>: pink <span class=\"hljs-meta\">!important</span>;\n}</code></pre>\n<p>支持复杂，重叠的禁用和启用模式：</p>\n<pre><code class=\"hljs   language-css\"><span class=\"hljs-comment\">/* stylelint-disable */</span>\n<span class=\"hljs-comment\">/* stylelint-enable foo */</span>\n<span class=\"hljs-comment\">/* stylelint-disable foo */</span>\n<span class=\"hljs-comment\">/* stylelint-enable */</span>\n<span class=\"hljs-comment\">/* stylelint-disable foo, bar */</span>\n<span class=\"hljs-comment\">/* stylelint-disable baz */</span>\n<span class=\"hljs-comment\">/* stylelint-enable baz, bar */</span>\n<span class=\"hljs-comment\">/* stylelint-enable foo */</span></code></pre>\n<p><strong>警告：</strong> <em>选择器和值列表</em>中的注释目前被忽略。</p>\n<h4 id=\"严重性：错误和警告\"><a href=\"#%E4%B8%A5%E9%87%8D%E6%80%A7%EF%BC%9A%E9%94%99%E8%AF%AF%E5%92%8C%E8%AD%A6%E5%91%8A\" class=\"phenomic-HeadingAnchor\">#</a>严重性：错误和警告</h4>\n<p>默认情况下，所有规则都是 <code>\"error\"</code> 级别的严重性。您可以通过在配置中添加 <code>defaultSeverity</code> 属性来更改此默认值（请参阅下文）。</p>\n<p>要调整任何特定规则的严重性，请使用辅助选项 <code>severity</code>。<code>severity</code> 的可用值是：</p>\n<ul>\n<li><code>\"warning\"</code></li>\n<li><code>\"error\"</code></li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 错误级别严重性示例</span>\n{ <span class=\"hljs-string\">\"indentation\"</span>: <span class=\"hljs-number\">2</span> }\n{ <span class=\"hljs-string\">\"indentation\"</span>: [<span class=\"hljs-number\">2</span>] }\n\n<span class=\"hljs-comment\">// 警告级别严重性示例</span>\n{ <span class=\"hljs-string\">\"indentation\"</span>: [<span class=\"hljs-number\">2</span>, { <span class=\"hljs-string\">\"severity\"</span>: <span class=\"hljs-string\">\"warning\"</span> } ] }\n{ <span class=\"hljs-string\">\"indentation\"</span>: [<span class=\"hljs-number\">2</span>, {\n    <span class=\"hljs-string\">\"except\"</span>: [<span class=\"hljs-string\">\"value\"</span>],\n    <span class=\"hljs-string\">\"severity\"</span>: <span class=\"hljs-string\">\"warning\"</span>\n  }]\n}</code></pre>\n<p>不同的报告生成器可以用不同的方式使用这些严重性级别，例如以不同方式显示它们，或以不同方式退出进程</p>\n<h4 id=\"自定义消息\"><a href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B6%88%E6%81%AF\" class=\"phenomic-HeadingAnchor\">#</a>自定义消息</h4>\n<p>如果要在违反规则时传递自定义消息，可以通过两种方式执行此操作：为规则提供“消息”选项，或编写自定义格式化程序。</p>\n<p>所有规则都接受一个 <code>message</code> 辅助选项，如果指定该选项，任何标准消息都将被替为换指定的内容。例如，以下规则配置将替换几个自定义消息：</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"color-hex-case\"</span>: [ <span class=\"hljs-string\">\"lower\"</span>, {\n    <span class=\"hljs-attr\">\"message\"</span>: <span class=\"hljs-string\">\"小写字母更容易与数字区分开来\"</span>\n  } ],\n  <span class=\"hljs-attr\">\"indentation\"</span>: [ <span class=\"hljs-number\">2</span>, {\n    <span class=\"hljs-attr\">\"except\"</span>: [<span class=\"hljs-string\">\"block\"</span>],\n    <span class=\"hljs-attr\">\"message\"</span>: <span class=\"hljs-string\">\"请使用2个空格进行缩进。制表符使建筑师性情乖戾\"</span>,\n    <span class=\"hljs-attr\">\"severity\"</span>: <span class=\"hljs-string\">\"warning\"</span>\n  } ]\n}</code></pre>\n<p>如果您需要深度定制，编写<a href=\"../../developer-guide/formatters/\">自定义格式化程序</a>可以为您提供最大程度的控制。</p>\n<h3 id=\"extends\"><a href=\"#extends\" class=\"phenomic-HeadingAnchor\">#</a><code>extends</code></h3>\n<p>您的配置可以<em>继承</em>现有配置（无论您自己的配置还是第三方配置）。当一个配置继承另一个配置时，它从另一个配置的属性开始，然后添加并覆盖其中的内容。</p>\n<p>您可以继承现有配置的数组，数组中的每个项都优先于前一项（因此第二项将覆盖第一项中的规则，第三项将覆盖第一项和第二项中的规则，依此类推，最后一项覆盖其他所有内容）。</p>\n<p>例如，继承 <a href=\"https://github.com/stylelint/stylelint-config-standard\"><code>stylelint-config-standard</code></a>，然后将缩进更改为制表符并关闭 <code>number-leading-zero</code> 规则：</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"extends\"</span>: <span class=\"hljs-string\">\"stylelint-config-standard\"</span>,\n  <span class=\"hljs-attr\">\"rules\"</span>: {\n    <span class=\"hljs-attr\">\"indentation\"</span>: <span class=\"hljs-string\">\"tab\"</span>,\n    <span class=\"hljs-attr\">\"number-leading-zero\"</span>: <span class=\"hljs-literal\">null</span>\n  }\n}</code></pre>\n<p>或者从 <code>stylelint-config-standard</code> 开始，然后在其上层叠 <code>myExtendableConfig</code>，然后覆盖缩进规则：</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"extends\"</span>: [\n    <span class=\"hljs-string\">\"stylelint-config-standard\"</span>,\n    <span class=\"hljs-string\">\"./myExtendableConfig\"</span>\n  ],\n  <span class=\"hljs-attr\">\"rules\"</span>: {\n    <span class=\"hljs-attr\">\"indentation\"</span>: <span class=\"hljs-string\">\"tab\"</span>\n  }\n}</code></pre>\n<p><code>\"extends\"</code> 的值是一个“定位符”（或者是一个“定位符”数组），最终通过 <code>require()</code> 加载，所以可以是任何适用于 Node 的 <code>require.resolve()</code> 算法的格式。这意味着“定位符”可以是：</p>\n<ul>\n<li><code>node_modules</code> 中模块的名称（例如 <code>stylelint-config-standard</code>；该模块的 <code>main</code> 文件必须是有效的 JSON 配置）</li>\n<li>使用 <code>.js</code> 或 <code>.json</code> 扩展名的文件绝对路径（如果您在 Node.js 上下文中创建 JS 对象并将其传入，则这是有意义的）。</li>\n<li>相对于引用配置的使用 <code>.js</code> 或 <code>.json</code> 扩展名的文件相对路径（例如，如果 configA 具有 <code>extends: \"../configB\"</code>，我们将相对于 configA 查找 <code>configB</code>）。</li>\n</ul>\n<p><em>有赖于 <code>extends</code>，您可以创建和使用可共享的 stylelint 配置。</em> 如果您将配置发布到 npm，请在 <code>package.json</code> 中使用 <code>stylelint-config</code> 关键字。</p>\n<h3 id=\"plugins\"><a href=\"#plugins\" class=\"phenomic-HeadingAnchor\">#</a><code>plugins</code></h3>\n<p>插件是社区构建的支持方法、工具集、<em>非标准</em> CSS 功能或非常具体的用例的规则或规则集</p>\n<p>要使用插件，请在您的配置中添加一个 <code>\"plugins\"</code> 数组，在其中包含标识您要使用的插件的“定位符”。与上面的 <code>extends</code> 一样，“定位符”可以是 npm 模块名称，绝对路径或相对于调用配置文件的路径。</p>\n<p>一旦声明了插件，在您的 <code>\"rules\"</code> 对象中，<em>您需要为插件的规则添加选项</em>，就像任何标准规则一样。您需要查看插件的文档才能知道规则名称应该是什么。</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"plugins\"</span>: [\n    <span class=\"hljs-string\">\"../special-rule.js\"</span>\n  ],\n  <span class=\"hljs-attr\">\"rules\"</span>: {\n    <span class=\"hljs-attr\">\"plugin/special-rule\"</span>: <span class=\"hljs-string\">\"everything\"</span>\n  }\n}</code></pre>\n<p>“插件”可以提供单个规则或规则集。如果您使用的插件提供规则集，只需在 <code>\"plugins\"</code> 配置中调用该模块，并在<code>\"rules\"</code>中使用它提供的规则。例如：</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"plugins\"</span>: [\n    <span class=\"hljs-string\">\"../some-rule-set.js\"</span>\n  ],\n  <span class=\"hljs-attr\">\"rules\"</span>: {\n    <span class=\"hljs-attr\">\"some-rule-set/first-rule\"</span>: <span class=\"hljs-string\">\"everything\"</span>,\n    <span class=\"hljs-attr\">\"some-rule-set/second-rule\"</span>: <span class=\"hljs-string\">\"nothing\"</span>,\n    <span class=\"hljs-attr\">\"some-rule-set/third-rule\"</span>: <span class=\"hljs-string\">\"everything\"</span>\n  }\n}</code></pre>\n<h3 id=\"processors\"><a href=\"#processors\" class=\"phenomic-HeadingAnchor\">#</a><code>processors</code></h3>\n<p>Processors are functions that hook into stylelint's pipeline, modifying code on its way into stylelint and modifying results on their way out.</p>\n<p><em>Processors can only be used with the CLI and the Node.js API, not with the PostCSS plugin.</em> (The PostCSS plugin will ignore them.)</p>\n<p>Processors can enable stylelint to lint, but not autofix, the CSS within non-stylesheet files that aren't supported out-of-the-box by stylelint.</p>\n<p>To use one, add a <code>\"processors\"</code> array to your config, containing \"locaters\" identifying the processors you want to use. As with <code>extends</code>, above, a \"locater\" can be either an npm module name, an absolute path, or a path relative to the invoking configuration file.</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"processors\"</span>: [<span class=\"hljs-string\">\"stylelint-my-processor\"</span>],\n  <span class=\"hljs-attr\">\"rules\"</span>: {..}\n}</code></pre>\n<p>If your processor has options, make that item an array whose first item is the \"locator\" and second item is the options object.</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"processors\"</span>: [\n    <span class=\"hljs-string\">\"stylelint-my-processor\"</span>,\n    [ <span class=\"hljs-string\">\"some-other-processor\"</span>, { <span class=\"hljs-attr\">\"optionOne\"</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">\"optionTwo\"</span>: <span class=\"hljs-literal\">false</span> } ]\n  ],\n  <span class=\"hljs-attr\">\"rules\"</span>: {..}\n}</code></pre>\n<h3 id=\"ignorefiles\"><a href=\"#ignorefiles\" class=\"phenomic-HeadingAnchor\">#</a><code>ignoreFiles</code></h3>\n<p>提供glob或glob数组以忽略特定文件。</p>\n<p><em>请注意，这不是忽略大量文件的有效方法。</em> 如果要有效地忽略大量文件，请使用<code>.stylelintignore</code>或调整文件glob。</p>\n<p>如果globs是绝对路径，则它们按原样使用。如果它们是相对路径，则相对于它们进行分析：</p>\n<ul>\n<li><code>configBasedir</code>，如果提供的话；</li>\n<li>配置的文件路径，如果配置是 stylelint 查找加载的文件的话；</li>\n<li>或 <code>process.cwd()</code>。</li>\n</ul>\n<p>默认情况下，忽略所有<code>node_modules</code>和<code>bower_components</code>。如果设置了<code>ignoreFiles</code>，则将覆盖默认值。</p>\n<p><code>ignoreFiles</code>属性从继承配置中删除：只有根级配置可以忽略文件。</p>\n<h3 id=\"defaultseverity\"><a href=\"#defaultseverity\" class=\"phenomic-HeadingAnchor\">#</a><code>defaultSeverity</code></h3>\n<p>未在辅助选项中指定严重性的所有规则的默认严重性级别。<code>severity</code> 的可用值是：</p>\n<ul>\n<li><code>\"warning\"</code></li>\n<li><code>\"error\"</code></li>\n</ul>\n<h2 id=\"stylelintignore\"><a href=\"#stylelintignore\" class=\"phenomic-HeadingAnchor\">#</a><code>.stylelintignore</code></h2>\n<p>您可以使用 <code>.stylelintignore</code> 文件（或指向另一个忽略模式文件）来忽略特定文件。</p>\n<p>在检查文件系统之前，这些文件将从文件glob中排除，因此它是忽略大量文件的有效方法。</p>\n<p><code>.stylelintignore</code>文件中的模式必须与 <a href=\"https://git-scm.com/docs/gitignore\"><code>.gitignore</code> 语法</a>匹配。（在幕后，<a href=\"https://github.com/kaelzhang/node-ignore\"><code>node-ignore</code></a> 解析您的模式。）这意味着您的 <em><code>.stylelintignore</code> 中的模式总是相对于 <code>process.cwd()</code> 进行分析。</em></p>\n<p>stylelint 将在 <code>process.cwd()</code> 中查找<code>.stylelintignore</code>文件。您还可以使用<code>--ignore-path</code>（在CLI中）和 <code>ignorePath</code>（在JS中）选项指定忽略模式文件的路径（绝对或相对于<code>process.cwd()</code>）。</p>\n","__filename":"user-guide/configuration.md","__url":"/user-guide/configuration/","__resourceUrl":"/user-guide/configuration/index.html","__dataUrl":"/user-guide/configuration/index.html.64202b3c4a5fccffae74f9a5338c7071.json"}